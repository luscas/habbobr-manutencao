{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nimport xmlToJson from './xmlToJson';\nexport function radioNewStatus(type, newText, document) {\n  switch (type) {\n    case 'avatar':\n      document.setProperty('--avatar', \"url(https://www.habbo.com.br/habbo-imaging/avatarimage?img_format=gif&user=\".concat(newText, \"&action=std&direction=2&head_direction=3&gesture=spk&size=b)\"));\n      break;\n\n    case 'locutor':\n      document.querySelector('.ver-locutor').textContent = newText;\n      break;\n\n    case 'programa':\n      document.querySelector('.ver-programa').textContent = newText;\n      break;\n\n    case 'ouvintes':\n      document.querySelector('.ver-ouvintes').textContent = newText;\n      break;\n  }\n}\n;\nexport function radioUpdate(action, document) {\n  if (action == 'avatar' || action == 'all') {\n    radioNewStatus('avatar', 'AutoDJ');\n  } else {\n    radioNewStatus(action, '...');\n  }\n\n  fetch('https://painel.audiovox.pw/api/Njc2OCsw').then(function (response) {\n    return response.text();\n  }).then(function (str) {\n    return new window.DOMParser().parseFromString(str, \"text/xml\");\n  }).then(function (data) {\n    var status = xmlToJson(data).info;\n\n    switch (action) {\n      case 'all':\n        radioNewStatus('avatar', status.titulo['#text'], document);\n        radioNewStatus('locutor', status.titulo['#text'], document);\n        radioNewStatus('programa', status.genero['#text'], document);\n        radioNewStatus('ouvintes', status.ouvintes_conectados['#text'], document);\n        break;\n\n      case 'locutor':\n        radioNewStatus('avatar', status.titulo['#text']), document;\n        radioNewStatus('locutor', status.titulo['#text'], document);\n        break;\n\n      case 'programa':\n        radioNewStatus('programa', status.genero['#text'], document);\n        break;\n\n      case 'ouvintes':\n        radioNewStatus('ouvintes', status.ouvintes_conectados['#text'], document);\n        break;\n    }\n  });\n}\n;","map":{"version":3,"sources":["/Users/lucas/Desktop/habbobr-manutencao/helpers/radio.js"],"names":["fetch","xmlToJson","radioNewStatus","type","newText","document","setProperty","querySelector","textContent","radioUpdate","action","then","response","text","str","window","DOMParser","parseFromString","data","status","info","titulo","genero","ouvintes_conectados"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,OAA9B,EAAuCC,QAAvC,EAAgD;AACnD,UAAQF,IAAR;AACI,SAAK,QAAL;AACIE,MAAAA,QAAQ,CAACC,WAAT,CAAqB,UAArB,uFAA+GF,OAA/G;AACJ;;AAEA,SAAK,SAAL;AACIC,MAAAA,QAAQ,CAACE,aAAT,CAAuB,cAAvB,EAAuCC,WAAvC,GAAqDJ,OAArD;AACJ;;AACA,SAAK,UAAL;AACIC,MAAAA,QAAQ,CAACE,aAAT,CAAuB,eAAvB,EAAwCC,WAAxC,GAAsDJ,OAAtD;AACJ;;AACA,SAAK,UAAL;AACIC,MAAAA,QAAQ,CAACE,aAAT,CAAuB,eAAvB,EAAwCC,WAAxC,GAAsDJ,OAAtD;AACJ;AAbJ;AAeH;AAAA;AAED,OAAO,SAASK,WAAT,CAAqBC,MAArB,EAA6BL,QAA7B,EAAuC;AAC1C,MAAIK,MAAM,IAAI,QAAV,IAAsBA,MAAM,IAAI,KAApC,EAA2C;AACvCR,IAAAA,cAAc,CAAC,QAAD,EAAW,QAAX,CAAd;AACH,GAFD,MAEO;AACHA,IAAAA,cAAc,CAACQ,MAAD,EAAS,KAAT,CAAd;AACH;;AAEDV,EAAAA,KAAK,CAAC,yCAAD,CAAL,CAAiDW,IAAjD,CAAsD,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,GAA9D,EAAmFF,IAAnF,CAAwF,UAAAG,GAAG;AAAA,WAAK,IAAIC,MAAM,CAACC,SAAX,EAAD,CAAyBC,eAAzB,CAAyCH,GAAzC,EAA8C,UAA9C,CAAJ;AAAA,GAA3F,EAA0JH,IAA1J,CAA+J,UAAAO,IAAI,EAAI;AACnK,QAAIC,MAAM,GAAGlB,SAAS,CAACiB,IAAD,CAAT,CAAgBE,IAA7B;;AACA,YAAQV,MAAR;AACI,WAAK,KAAL;AACIR,QAAAA,cAAc,CAAC,QAAD,EAAWiB,MAAM,CAACE,MAAP,CAAc,OAAd,CAAX,EAAmChB,QAAnC,CAAd;AACAH,QAAAA,cAAc,CAAC,SAAD,EAAYiB,MAAM,CAACE,MAAP,CAAc,OAAd,CAAZ,EAAoChB,QAApC,CAAd;AACAH,QAAAA,cAAc,CAAC,UAAD,EAAaiB,MAAM,CAACG,MAAP,CAAc,OAAd,CAAb,EAAqCjB,QAArC,CAAd;AACAH,QAAAA,cAAc,CAAC,UAAD,EAAaiB,MAAM,CAACI,mBAAP,CAA2B,OAA3B,CAAb,EAAkDlB,QAAlD,CAAd;AACA;;AACJ,WAAK,SAAL;AACIH,QAAAA,cAAc,CAAC,QAAD,EAAWiB,MAAM,CAACE,MAAP,CAAc,OAAd,CAAX,CAAd,EAAkDhB,QAAlD;AACAH,QAAAA,cAAc,CAAC,SAAD,EAAYiB,MAAM,CAACE,MAAP,CAAc,OAAd,CAAZ,EAAoChB,QAApC,CAAd;AACA;;AACJ,WAAK,UAAL;AACIH,QAAAA,cAAc,CAAC,UAAD,EAAaiB,MAAM,CAACG,MAAP,CAAc,OAAd,CAAb,EAAqCjB,QAArC,CAAd;AACA;;AACJ,WAAK,UAAL;AACIH,QAAAA,cAAc,CAAC,UAAD,EAAaiB,MAAM,CAACI,mBAAP,CAA2B,OAA3B,CAAb,EAAkDlB,QAAlD,CAAd;AACA;AAhBR;AAkBH,GApBD;AAqBH;AAAA","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport xmlToJson from './xmlToJson';\n\nexport function radioNewStatus(type, newText, document){\n    switch (type) {\n        case 'avatar':\n            document.setProperty('--avatar', `url(https://www.habbo.com.br/habbo-imaging/avatarimage?img_format=gif&user=${newText}&action=std&direction=2&head_direction=3&gesture=spk&size=b)`);\n        break;\n\n        case 'locutor':\n            document.querySelector('.ver-locutor').textContent = newText;\n        break;\n        case 'programa':\n            document.querySelector('.ver-programa').textContent = newText;\n        break;\n        case 'ouvintes':\n            document.querySelector('.ver-ouvintes').textContent = newText;\n        break;\n    }\n};\n\nexport function radioUpdate(action, document) {\n    if (action == 'avatar' || action == 'all') {\n        radioNewStatus('avatar', 'AutoDJ');\n    } else {\n        radioNewStatus(action, '...');\n    }\n\n    fetch('https://painel.audiovox.pw/api/Njc2OCsw').then(response => response.text()).then(str => (new window.DOMParser()).parseFromString(str, \"text/xml\")).then(data => {\n        let status = xmlToJson(data).info;\n        switch (action) {\n            case 'all':\n                radioNewStatus('avatar', status.titulo['#text'], document);\n                radioNewStatus('locutor', status.titulo['#text'], document);\n                radioNewStatus('programa', status.genero['#text'], document);\n                radioNewStatus('ouvintes', status.ouvintes_conectados['#text'], document);\n                break;\n            case 'locutor':\n                radioNewStatus('avatar', status.titulo['#text']), document;\n                radioNewStatus('locutor', status.titulo['#text'], document);\n                break;\n            case 'programa':\n                radioNewStatus('programa', status.genero['#text'], document);\n                break;\n            case 'ouvintes':\n                radioNewStatus('ouvintes', status.ouvintes_conectados['#text'], document);\n                break;\n        }\n    });\n};"]},"metadata":{},"sourceType":"module"}