{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nimport xmlToJson from './xmlToJson';\nexport default Radio = () => {\n  function newStatus(type, newText) {\n    switch (type) {\n      case 'avatar':\n        document.setProperty('--avatar', `url(https://www.habbo.com.br/habbo-imaging/avatarimage?img_format=gif&user=${newText}&action=std&direction=2&head_direction=3&gesture=spk&size=b)`);\n        break;\n\n      case 'locutor':\n        document.querySelector('.ver-locutor').textContent = newText;\n        break;\n\n      case 'programa':\n        document.querySelector('.ver-programa').textContent = newText;\n        break;\n\n      case 'ouvintes':\n        document.querySelector('.ver-ouvintes').textContent = newText;\n        break;\n    }\n  }\n\n  function update(action) {\n    if (action == 'avatar' || action == 'all') {\n      setNewStatus('avatar', 'AutoDJ');\n    } else {\n      setNewStatus(action, '...');\n    }\n\n    fetch('https://painel.audiovox.pw/api/Njc2OCsw').then(response => response.text()).then(str => new window.DOMParser().parseFromString(str, \"text/xml\")).then(data => {\n      let status = xmlToJson(data).info;\n\n      switch (action) {\n        case 'all':\n          setNewStatus('avatar', status.titulo['#text']);\n          setNewStatus('locutor', status.titulo['#text']);\n          setNewStatus('programa', status.genero['#text']);\n          setNewStatus('ouvintes', status.ouvintes_conectados['#text']);\n          break;\n\n        case 'locutor':\n          setNewStatus('avatar', status.titulo['#text']);\n          setNewStatus('locutor', status.titulo['#text']);\n          break;\n\n        case 'programa':\n          setNewStatus('programa', status.genero['#text']);\n          break;\n\n        case 'ouvintes':\n          setNewStatus('ouvintes', status.ouvintes_conectados['#text']);\n          break;\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/lucas/Desktop/habbobr-manutencao/helpers/radio.js"],"names":["fetch","xmlToJson","Radio","newStatus","type","newText","document","setProperty","querySelector","textContent","update","action","setNewStatus","then","response","text","str","window","DOMParser","parseFromString","data","status","info","titulo","genero","ouvintes_conectados"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAGA,eAAeC,KAAK,GAAG,MAAM;AACzB,WAASC,SAAT,CAAmBC,IAAnB,EAAyBC,OAAzB,EAAkC;AAC9B,YAAQD,IAAR;AACI,WAAK,QAAL;AACIE,QAAAA,QAAQ,CAACC,WAAT,CAAqB,UAArB,EAAkC,8EAA6EF,OAAQ,8DAAvH;AACA;;AACJ,WAAK,SAAL;AACIC,QAAAA,QAAQ,CAACE,aAAT,CAAuB,cAAvB,EAAuCC,WAAvC,GAAqDJ,OAArD;AACA;;AACJ,WAAK,UAAL;AACIC,QAAAA,QAAQ,CAACE,aAAT,CAAuB,eAAvB,EAAwCC,WAAxC,GAAsDJ,OAAtD;AACA;;AACJ,WAAK,UAAL;AACIC,QAAAA,QAAQ,CAACE,aAAT,CAAuB,eAAvB,EAAwCC,WAAxC,GAAsDJ,OAAtD;AACA;AAZR;AAcH;;AAED,WAASK,MAAT,CAAgBC,MAAhB,EAAwB;AACpB,QAAIA,MAAM,IAAI,QAAV,IAAsBA,MAAM,IAAI,KAApC,EAA2C;AACvCC,MAAAA,YAAY,CAAC,QAAD,EAAW,QAAX,CAAZ;AACH,KAFD,MAEO;AACHA,MAAAA,YAAY,CAACD,MAAD,EAAS,KAAT,CAAZ;AACH;;AACDX,IAAAA,KAAK,CAAC,yCAAD,CAAL,CAAiDa,IAAjD,CAAsDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAAlE,EAAmFF,IAAnF,CAAwFG,GAAG,IAAK,IAAIC,MAAM,CAACC,SAAX,EAAD,CAAyBC,eAAzB,CAAyCH,GAAzC,EAA8C,UAA9C,CAA/F,EAA0JH,IAA1J,CAA+JO,IAAI,IAAI;AACnK,UAAIC,MAAM,GAAGpB,SAAS,CAACmB,IAAD,CAAT,CAAgBE,IAA7B;;AACA,cAAQX,MAAR;AACI,aAAK,KAAL;AACIC,UAAAA,YAAY,CAAC,QAAD,EAAWS,MAAM,CAACE,MAAP,CAAc,OAAd,CAAX,CAAZ;AACAX,UAAAA,YAAY,CAAC,SAAD,EAAYS,MAAM,CAACE,MAAP,CAAc,OAAd,CAAZ,CAAZ;AACAX,UAAAA,YAAY,CAAC,UAAD,EAAaS,MAAM,CAACG,MAAP,CAAc,OAAd,CAAb,CAAZ;AACAZ,UAAAA,YAAY,CAAC,UAAD,EAAaS,MAAM,CAACI,mBAAP,CAA2B,OAA3B,CAAb,CAAZ;AACA;;AACJ,aAAK,SAAL;AACIb,UAAAA,YAAY,CAAC,QAAD,EAAWS,MAAM,CAACE,MAAP,CAAc,OAAd,CAAX,CAAZ;AACAX,UAAAA,YAAY,CAAC,SAAD,EAAYS,MAAM,CAACE,MAAP,CAAc,OAAd,CAAZ,CAAZ;AACA;;AACJ,aAAK,UAAL;AACIX,UAAAA,YAAY,CAAC,UAAD,EAAaS,MAAM,CAACG,MAAP,CAAc,OAAd,CAAb,CAAZ;AACA;;AACJ,aAAK,UAAL;AACIZ,UAAAA,YAAY,CAAC,UAAD,EAAaS,MAAM,CAACI,mBAAP,CAA2B,OAA3B,CAAb,CAAZ;AACA;AAhBR;AAkBH,KApBD;AAqBH;AACJ,CA9CD","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport xmlToJson from './xmlToJson';\n\n\nexport default Radio = () => {\n    function newStatus(type, newText) {\n        switch (type) {\n            case 'avatar':\n                document.setProperty('--avatar', `url(https://www.habbo.com.br/habbo-imaging/avatarimage?img_format=gif&user=${newText}&action=std&direction=2&head_direction=3&gesture=spk&size=b)`);\n                break;\n            case 'locutor':\n                document.querySelector('.ver-locutor').textContent = newText;\n                break;\n            case 'programa':\n                document.querySelector('.ver-programa').textContent = newText;\n                break;\n            case 'ouvintes':\n                document.querySelector('.ver-ouvintes').textContent = newText;\n                break;\n        }\n    }\n\n    function update(action) {\n        if (action == 'avatar' || action == 'all') {\n            setNewStatus('avatar', 'AutoDJ');\n        } else {\n            setNewStatus(action, '...');\n        }\n        fetch('https://painel.audiovox.pw/api/Njc2OCsw').then(response => response.text()).then(str => (new window.DOMParser()).parseFromString(str, \"text/xml\")).then(data => {\n            let status = xmlToJson(data).info;\n            switch (action) {\n                case 'all':\n                    setNewStatus('avatar', status.titulo['#text']);\n                    setNewStatus('locutor', status.titulo['#text']);\n                    setNewStatus('programa', status.genero['#text']);\n                    setNewStatus('ouvintes', status.ouvintes_conectados['#text']);\n                    break;\n                case 'locutor':\n                    setNewStatus('avatar', status.titulo['#text']);\n                    setNewStatus('locutor', status.titulo['#text']);\n                    break;\n                case 'programa':\n                    setNewStatus('programa', status.genero['#text']);\n                    break;\n                case 'ouvintes':\n                    setNewStatus('ouvintes', status.ouvintes_conectados['#text']);\n                    break;\n            }\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}