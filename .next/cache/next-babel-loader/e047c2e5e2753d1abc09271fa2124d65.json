{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/lucas/Desktop/habbobr-manutencao/pages/index.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { Howl, Howler } from 'howler'; // import ReactAudioPlayer from 'react-audio-player';\n\nimport ReactSlider from 'react-slider';\nimport fetch from 'isomorphic-unfetch';\n\nvar Index = function Index(props) {\n  var _useState = useState('stop'),\n      status = _useState[0],\n      setStatus = _useState[1];\n\n  var stream = \"https://player.audiovox.pw/proxy/6768/;type=mp3\";\n  var sound = new Howl({\n    src: stream,\n    autoplay: true,\n    volume: 1.0,\n    html5: true,\n    format: ['mp3', 'aac'],\n    onload: function onload() {\n      return console.log('Started!');\n    },\n    onend: function onend() {\n      return console.log('Finished!');\n    }\n  }).play();\n\n  function setSlider(value) {\n    if (value > 0) {\n      setStatus('stop');\n    } else {\n      setStatus('play');\n    }\n\n    if (value > 0) {\n      document.querySelector('.react-audio-player').volume = parseFloat(value);\n    }\n  }\n\n  function toggle() {\n    if (this.sound.volume <= 0) {\n      sound.play();\n      setStatus('stop');\n    } else {\n      this.sound.play();\n      setStatus('play');\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"background\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    className: \"radial\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    className: \"player\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"radio-status\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"radio-status-avatar\",\n    style: {\n      backgroundImage: \"url(https://www.habbo.com.br/habbo-imaging/avatarimage?img_format=gif&user=\".concat(props.radio.servertitle, \"&direction=2&head_direction=2&gesture=sml&size=b)\")\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }), __jsx(\"div\", {\n    className: \"radio-status-data\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }, props.radio.servertitle), __jsx(\"div\", {\n    className: \"radio-status-data\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, props.radio.servergenre)), __jsx(ReactSlider, {\n    className: \"radio-slider\",\n    trackClassName: \"radio-slider-control\",\n    onChange: function onChange(value) {\n      return setSlider(value / 100);\n    },\n    min: 0,\n    defaultValue: 100,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    className: \"radio-status-data-listeners\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, props.radio.currentlisteners == 0 ? 1 : props.radio.currentlisteners, __jsx(\"div\", {\n    className: \"radio-status-data-listeners-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, \"ouvintes\"))), __jsx(\"div\", {\n    className: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"logo\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: \"vacancies\",\n    onClick: function onClick() {\n      return alert('Not now!');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, \"Vagas\"), __jsx(\"div\", {\n    className: \"control \".concat(status),\n    onClick: function onClick() {\n      return toggle();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }), __jsx(\"div\", {\n    className: \"team\",\n    onClick: function onClick() {\n      return alert('Not now!');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, \"Equipe\"))));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://serv3.audiovox.pw:6768/stats?sid=1&json=1'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            radio: data\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/lucas/Desktop/habbobr-manutencao/pages/index.js"],"names":["useState","useEffect","Howl","Howler","ReactSlider","fetch","Index","props","status","setStatus","stream","sound","src","autoplay","volume","html5","format","onload","console","log","onend","play","setSlider","value","document","querySelector","parseFloat","toggle","backgroundImage","radio","servertitle","servergenre","currentlisteners","alert","getInitialProps","res","json","data"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport {Howl, Howler} from 'howler';\n// import ReactAudioPlayer from 'react-audio-player';\nimport ReactSlider from 'react-slider';\nimport fetch from 'isomorphic-unfetch';\n\nconst Index = props => {\n    let [status, setStatus] = useState('stop');\n\n    let stream = \"https://player.audiovox.pw/proxy/6768/;type=mp3\";\n    let sound = new Howl({\n        src: stream,\n        autoplay: true,\n        volume: 1.0,\n        html5: true,\n        format: ['mp3', 'aac'],\n        onload: () => console.log('Started!'),\n        onend: () => console.log('Finished!'),\n    }).play();\n\n    function setSlider(value) {\n        if(value > 0) {\n            setStatus('stop');\n        } else {\n            setStatus('play');\n        }\n\n        if(value > 0) {\n            document.querySelector('.react-audio-player').volume = parseFloat(value);\n        }\n    }\n\n    function toggle() {\n        if(this.sound.volume <= 0) {\n            sound.play();\n            setStatus('stop');\n        } else {\n            this.sound.play();\n            setStatus('play');\n        }\n    }\n\n    return (\n        <>\n            <div className=\"background\"></div>\n            <div className=\"radial\"></div>\n\n            <div className=\"player\">\n                <div className=\"radio-status\">\n                    <div className=\"radio-status-avatar\" style={{ backgroundImage: `url(https://www.habbo.com.br/habbo-imaging/avatarimage?img_format=gif&user=${props.radio.servertitle}&direction=2&head_direction=2&gesture=sml&size=b)` }}></div>\n                    <div className=\"radio-status-data\">{props.radio.servertitle}</div>\n                    <div className=\"radio-status-data\">{props.radio.servergenre}</div>\n                </div>\n\n                {/* <RadioSlider /> */}\n                <ReactSlider\n                    className=\"radio-slider\"\n                    trackClassName=\"radio-slider-control\"\n                    onChange={(value) => setSlider(value / 100)}\n                    min={0}\n                    defaultValue={100}\n                />\n\n                <div className=\"radio-status-data-listeners\">\n                    {props.radio.currentlisteners == 0 ? 1 : props.radio.currentlisteners}\n                    <div className=\"radio-status-data-listeners-text\">ouvintes</div>\n                </div>\n            </div>\n\n            <div className=\"center\">\n                <div className=\"logo\">\n                    <div className=\"vacancies\" onClick={() => alert('Not now!')}>Vagas</div>\n                    <div className={`control ${status}`} onClick={() => toggle() }></div>\n                    <div className=\"team\" onClick={() => alert('Not now!')}>Equipe</div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nIndex.getInitialProps = async function() {\n    const res  = await fetch('http://serv3.audiovox.pw:6768/stats?sid=1&json=1');\n    const data = await res.json();\n  \n    return {\n        radio: data\n    };\n};\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}