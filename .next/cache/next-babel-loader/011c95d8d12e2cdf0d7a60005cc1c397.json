{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport fetch from 'isomorphic-unfetch';\nimport xmlToJson from './xmlToJson';\n\nvar Radio = /*#__PURE__*/function () {\n  function Radio() {\n    _classCallCheck(this, Radio);\n  }\n\n  _createClass(Radio, [{\n    key: \"newStatus\",\n    value: function newStatus(type, newText) {\n      switch (type) {\n        case 'avatar':\n          document.setProperty('--avatar', \"url(https://www.habbo.com.br/habbo-imaging/avatarimage?img_format=gif&user=\".concat(newText, \"&action=std&direction=2&head_direction=3&gesture=spk&size=b)\"));\n          break;\n\n        case 'locutor':\n          document.querySelector('.ver-locutor').textContent = newText;\n          break;\n\n        case 'programa':\n          document.querySelector('.ver-programa').textContent = newText;\n          break;\n\n        case 'ouvintes':\n          document.querySelector('.ver-ouvintes').textContent = newText;\n          break;\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(action) {\n      if (action == 'avatar' || action == 'all') {\n        setNewStatus('avatar', 'AutoDJ');\n      } else {\n        setNewStatus(action, '...');\n      }\n\n      fetch('https://painel.audiovox.pw/api/Njc2OCsw').then(function (response) {\n        return response.text();\n      }).then(function (str) {\n        return new window.DOMParser().parseFromString(str, \"text/xml\");\n      }).then(function (data) {\n        var status = xmlToJson(data).info;\n\n        switch (action) {\n          case 'all':\n            setNewStatus('avatar', status.titulo['#text']);\n            setNewStatus('locutor', status.titulo['#text']);\n            setNewStatus('programa', status.genero['#text']);\n            setNewStatus('ouvintes', status.ouvintes_conectados['#text']);\n            break;\n\n          case 'locutor':\n            setNewStatus('avatar', status.titulo['#text']);\n            setNewStatus('locutor', status.titulo['#text']);\n            break;\n\n          case 'programa':\n            setNewStatus('programa', status.genero['#text']);\n            break;\n\n          case 'ouvintes':\n            setNewStatus('ouvintes', status.ouvintes_conectados['#text']);\n            break;\n        }\n      });\n    }\n  }]);\n\n  return Radio;\n}();\n\nexport default Radio;","map":{"version":3,"sources":["/Users/lucas/Desktop/habbobr-manutencao/helpers/radio.js"],"names":["fetch","xmlToJson","Radio","type","newText","document","setProperty","querySelector","textContent","action","setNewStatus","then","response","text","str","window","DOMParser","parseFromString","data","status","info","titulo","genero","ouvintes_conectados"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;IAEMC,K;;;;;;;8BACQC,I,EAAMC,O,EAAS;AACrB,cAAQD,IAAR;AACI,aAAK,QAAL;AACIE,UAAAA,QAAQ,CAACC,WAAT,CAAqB,UAArB,uFAA+GF,OAA/G;AACA;;AACJ,aAAK,SAAL;AACIC,UAAAA,QAAQ,CAACE,aAAT,CAAuB,cAAvB,EAAuCC,WAAvC,GAAqDJ,OAArD;AACA;;AACJ,aAAK,UAAL;AACIC,UAAAA,QAAQ,CAACE,aAAT,CAAuB,eAAvB,EAAwCC,WAAxC,GAAsDJ,OAAtD;AACA;;AACJ,aAAK,UAAL;AACIC,UAAAA,QAAQ,CAACE,aAAT,CAAuB,eAAvB,EAAwCC,WAAxC,GAAsDJ,OAAtD;AACA;AAZR;AAcH;;;2BAEMK,M,EAAQ;AACX,UAAIA,MAAM,IAAI,QAAV,IAAsBA,MAAM,IAAI,KAApC,EAA2C;AACvCC,QAAAA,YAAY,CAAC,QAAD,EAAW,QAAX,CAAZ;AACH,OAFD,MAEO;AACHA,QAAAA,YAAY,CAACD,MAAD,EAAS,KAAT,CAAZ;AACH;;AACDT,MAAAA,KAAK,CAAC,yCAAD,CAAL,CAAiDW,IAAjD,CAAsD,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,OAA9D,EAAmFF,IAAnF,CAAwF,UAAAG,GAAG;AAAA,eAAK,IAAIC,MAAM,CAACC,SAAX,EAAD,CAAyBC,eAAzB,CAAyCH,GAAzC,EAA8C,UAA9C,CAAJ;AAAA,OAA3F,EAA0JH,IAA1J,CAA+J,UAAAO,IAAI,EAAI;AACnK,YAAIC,MAAM,GAAGlB,SAAS,CAACiB,IAAD,CAAT,CAAgBE,IAA7B;;AACA,gBAAQX,MAAR;AACI,eAAK,KAAL;AACIC,YAAAA,YAAY,CAAC,QAAD,EAAWS,MAAM,CAACE,MAAP,CAAc,OAAd,CAAX,CAAZ;AACAX,YAAAA,YAAY,CAAC,SAAD,EAAYS,MAAM,CAACE,MAAP,CAAc,OAAd,CAAZ,CAAZ;AACAX,YAAAA,YAAY,CAAC,UAAD,EAAaS,MAAM,CAACG,MAAP,CAAc,OAAd,CAAb,CAAZ;AACAZ,YAAAA,YAAY,CAAC,UAAD,EAAaS,MAAM,CAACI,mBAAP,CAA2B,OAA3B,CAAb,CAAZ;AACA;;AACJ,eAAK,SAAL;AACIb,YAAAA,YAAY,CAAC,QAAD,EAAWS,MAAM,CAACE,MAAP,CAAc,OAAd,CAAX,CAAZ;AACAX,YAAAA,YAAY,CAAC,SAAD,EAAYS,MAAM,CAACE,MAAP,CAAc,OAAd,CAAZ,CAAZ;AACA;;AACJ,eAAK,UAAL;AACIX,YAAAA,YAAY,CAAC,UAAD,EAAaS,MAAM,CAACG,MAAP,CAAc,OAAd,CAAb,CAAZ;AACA;;AACJ,eAAK,UAAL;AACIZ,YAAAA,YAAY,CAAC,UAAD,EAAaS,MAAM,CAACI,mBAAP,CAA2B,OAA3B,CAAb,CAAZ;AACA;AAhBR;AAkBH,OApBD;AAqBH;;;;;;AAGL,eAAerB,KAAf","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport xmlToJson from './xmlToJson';\n\nclass Radio {\n    newStatus(type, newText) {\n        switch (type) {\n            case 'avatar':\n                document.setProperty('--avatar', `url(https://www.habbo.com.br/habbo-imaging/avatarimage?img_format=gif&user=${newText}&action=std&direction=2&head_direction=3&gesture=spk&size=b)`);\n                break;\n            case 'locutor':\n                document.querySelector('.ver-locutor').textContent = newText;\n                break;\n            case 'programa':\n                document.querySelector('.ver-programa').textContent = newText;\n                break;\n            case 'ouvintes':\n                document.querySelector('.ver-ouvintes').textContent = newText;\n                break;\n        }\n    }\n\n    update(action) {\n        if (action == 'avatar' || action == 'all') {\n            setNewStatus('avatar', 'AutoDJ');\n        } else {\n            setNewStatus(action, '...');\n        }\n        fetch('https://painel.audiovox.pw/api/Njc2OCsw').then(response => response.text()).then(str => (new window.DOMParser()).parseFromString(str, \"text/xml\")).then(data => {\n            let status = xmlToJson(data).info;\n            switch (action) {\n                case 'all':\n                    setNewStatus('avatar', status.titulo['#text']);\n                    setNewStatus('locutor', status.titulo['#text']);\n                    setNewStatus('programa', status.genero['#text']);\n                    setNewStatus('ouvintes', status.ouvintes_conectados['#text']);\n                    break;\n                case 'locutor':\n                    setNewStatus('avatar', status.titulo['#text']);\n                    setNewStatus('locutor', status.titulo['#text']);\n                    break;\n                case 'programa':\n                    setNewStatus('programa', status.genero['#text']);\n                    break;\n                case 'ouvintes':\n                    setNewStatus('ouvintes', status.ouvintes_conectados['#text']);\n                    break;\n            }\n        });\n    }\n}\n\nexport default Radio;"]},"metadata":{},"sourceType":"module"}