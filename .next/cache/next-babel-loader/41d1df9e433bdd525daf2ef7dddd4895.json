{"ast":null,"code":"var _jsxFileName = \"/Users/lucas/Desktop/habbobr-manutencao/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Component } from 'react';\nimport ReactHowler from 'react-howler'; // import ReactAudioPlayer from 'react-audio-player';\n\nimport ReactSlider from 'react-slider';\nimport xmlToJson from '../helpers/xmlToJson';\n\nclass Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stream: \"https://player.audiovox.pw/proxy/6768/;type=mp3\",\n      status: 'stop',\n      format: ['mp3', 'acc'],\n      volume: 100,\n      locutor: '...',\n      programa: '...',\n      ouvintes: '?'\n    };\n  }\n\n  radioNewStatus(type, newText) {\n    switch (type) {\n      case 'locutor':\n        this.setState({\n          locutor: newText\n        });\n        break;\n\n      case 'programa':\n        this.setState({\n          programa: newText\n        });\n        break;\n\n      case 'ouvintes':\n        this.setState({\n          ouvintes: newText\n        });\n        break;\n    }\n  }\n\n  radioUpdate(action) {\n    this.radioNewStatus(action, '...');\n    fetch('https://painel.audiovox.pw/api/Njc2OCsw').then(response => response.text()).then(str => new window.DOMParser().parseFromString(str, \"text/xml\")).then(data => {\n      let status = xmlToJson(data).info;\n\n      switch (action) {\n        case 'all':\n          this.radioNewStatus('locutor', status.titulo['#text']);\n          this.radioNewStatus('programa', status.genero['#text']);\n          this.radioNewStatus('ouvintes', status.ouvintes_conectados['#text']);\n          break;\n\n        case 'locutor':\n          this.radioNewStatus('avatar', status.titulo['#text']);\n          this.radioNewStatus('locutor', status.titulo['#text']);\n          break;\n\n        case 'programa':\n          this.radioNewStatus('programa', status.genero['#text']);\n          break;\n\n        case 'ouvintes':\n          this.radioNewStatus('ouvintes', status.ouvintes_conectados['#text']);\n          break;\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.radioUpdate('all');\n  }\n\n  setSlider(value) {\n    if (value > 0) {\n      this.sound.volume(parseFloat(value));\n    }\n  }\n\n  toggle() {\n    if (window.Howler._muted == true) {\n      window.Howler.mute(false);\n      this.setState({\n        status: 'stop'\n      });\n    } else {\n      window.Howler.mute(true);\n      this.setState({\n        status: 'play'\n      });\n    }\n  }\n\n  render() {\n    let {\n      stream,\n      format,\n      status,\n      volume\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(ReactHowler, {\n      src: stream,\n      autoplay: true,\n      volume: 1.0,\n      html5: true,\n      format: format,\n      ref: ref => this.sound = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }), __jsx(\"div\", {\n      className: \"background\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }), __jsx(\"div\", {\n      className: \"radial\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }), __jsx(\"div\", {\n      className: \"player\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"radio-status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      className: \"radio-status-avatar\",\n      style: {\n        backgroundImage: `https://www.habbo.com.br/habbo-imaging/avatarimage?img_format=gif&user=${this.state.locutor}&direction=2&head_direction=2&gesture=sml&size=b`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      className: \"radio-status-data\",\n      onClick: () => this.radioUpdate('locutor'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }\n    }, this.state.locutor), __jsx(\"div\", {\n      className: \"radio-status-data\",\n      onClick: () => this.radioUpdate('programa'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }\n    }, this.state.programa)), __jsx(ReactSlider, {\n      className: \"radio-slider\",\n      trackClassName: \"radio-slider-control\",\n      onChange: value => this.setSlider(value / 100),\n      min: 0,\n      defaultValue: volume,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }), __jsx(\"div\", {\n      className: \"radio-status-data-listeners\",\n      onClick: () => this.radioUpdate('ouvintes'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, this.state.ouvintes, __jsx(\"div\", {\n      className: \"radio-status-data-listeners-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    }, \"ouvintes\"))), __jsx(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      className: \"vacancies\",\n      onClick: () => alert('Not now!'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    }, \"Vagas\"), __jsx(\"div\", {\n      className: `control ${status}`,\n      onClick: () => this.toggle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      className: \"team\",\n      onClick: () => alert('Not now!'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }, \"Equipe\"))));\n  }\n\n} // Index.getInitialProps = async function() {\n//     const res  = await fetch('http://serv3.audiovox.pw:6768/stats?sid=1&json=1');\n//     const data = await res.json();\n//     return {\n//         radio: data\n//     };\n// };\n\n\nexport default Index;","map":{"version":3,"sources":["/Users/lucas/Desktop/habbobr-manutencao/pages/index.js"],"names":["Component","ReactHowler","ReactSlider","xmlToJson","Index","constructor","props","state","stream","status","format","volume","locutor","programa","ouvintes","radioNewStatus","type","newText","setState","radioUpdate","action","fetch","then","response","text","str","window","DOMParser","parseFromString","data","info","titulo","genero","ouvintes_conectados","componentDidMount","setSlider","value","sound","parseFloat","toggle","Howler","_muted","mute","render","ref","backgroundImage","alert"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport ReactHowler from 'react-howler'\n// import ReactAudioPlayer from 'react-audio-player';\nimport ReactSlider from 'react-slider';\nimport xmlToJson from '../helpers/xmlToJson';\n\nclass Index extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            stream: \"https://player.audiovox.pw/proxy/6768/;type=mp3\",\n            status: 'stop',\n            format: ['mp3', 'acc'],\n            volume: 100,\n            locutor: '...',\n            programa: '...',\n            ouvintes: '?' \n        }\n    }\n\n    radioNewStatus(type, newText){\n        switch (type) {\n            case 'locutor':\n                this.setState({ locutor: newText });\n                break;\n            case 'programa':\n                this.setState({ programa: newText });\n                break;\n            case 'ouvintes':\n                this.setState({ ouvintes: newText });\n                break;\n        }\n    }\n\n    radioUpdate(action) {\n        this.radioNewStatus(action, '...');\n    \n        fetch('https://painel.audiovox.pw/api/Njc2OCsw').then(response => response.text()).then(str => (new window.DOMParser()).parseFromString(str, \"text/xml\")).then(data => {\n            let status = xmlToJson(data).info;\n            switch (action) {\n                case 'all':\n                    this.radioNewStatus('locutor', status.titulo['#text']);\n                    this.radioNewStatus('programa', status.genero['#text']);\n                    this.radioNewStatus('ouvintes', status.ouvintes_conectados['#text']);\n                    break;\n                case 'locutor':\n                    this.radioNewStatus('avatar', status.titulo['#text']);\n                    this.radioNewStatus('locutor', status.titulo['#text']);\n                    break;\n                case 'programa':\n                    this.radioNewStatus('programa', status.genero['#text']);\n                    break;\n                case 'ouvintes':\n                    this.radioNewStatus('ouvintes', status.ouvintes_conectados['#text']);\n                    break;\n            }\n        });\n    }\n\n    componentDidMount() {\n        this.radioUpdate('all');\n    }\n\n    setSlider(value) {\n        if(value > 0) {\n            this.sound.volume(parseFloat(value));\n        }\n    }\n\n    toggle() {\n        if(window.Howler._muted == true) {\n            window.Howler.mute(false);\n            this.setState({ status: 'stop' });\n        } else {\n            window.Howler.mute(true);\n            this.setState({ status: 'play' });\n        }\n    }\n\n    render() {\n        let { stream, format, status, volume } = this.state;\n\n        return (\n            <>\n                <ReactHowler\n                    src={stream}\n                    autoplay={true}\n                    volume={1.0}\n                    html5={true}\n                    format={format}\n                    ref={(ref) => (this.sound = ref)}\n                />\n\n                <div className=\"background\"></div>\n                <div className=\"radial\"></div>\n\n                <div className=\"player\">\n                    <div className=\"radio-status\">\n                        <div\n                            className=\"radio-status-avatar\"\n                            style={{\n                                backgroundImage: `https://www.habbo.com.br/habbo-imaging/avatarimage?img_format=gif&user=${this.state.locutor}&direction=2&head_direction=2&gesture=sml&size=b`\n                            }}\n                        ></div>\n                        <div className=\"radio-status-data\" onClick={() => this.radioUpdate('locutor')}>{this.state.locutor}</div>\n                        <div className=\"radio-status-data\" onClick={() => this.radioUpdate('programa')}>{this.state.programa}</div>\n                    </div>\n\n                    {/* <RadioSlider /> */}\n                    <ReactSlider\n                        className=\"radio-slider\"\n                        trackClassName=\"radio-slider-control\"\n                        onChange={(value) => this.setSlider(value / 100)}\n                        min={0}\n                        defaultValue={volume}\n                    />\n\n                    <div className=\"radio-status-data-listeners\" onClick={() => this.radioUpdate('ouvintes')}>\n                        {this.state.ouvintes}\n                        <div className=\"radio-status-data-listeners-text\">ouvintes</div>\n                    </div>\n                </div>\n\n                <div className=\"center\">\n                    <div className=\"logo\">\n                        <div className=\"vacancies\" onClick={() => alert('Not now!')}>Vagas</div>\n                        <div className={`control ${status}`} onClick={() => this.toggle() }></div>\n                        <div className=\"team\" onClick={() => alert('Not now!')}>Equipe</div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\n// Index.getInitialProps = async function() {\n//     const res  = await fetch('http://serv3.audiovox.pw:6768/stats?sid=1&json=1');\n//     const data = await res.json();\n  \n//     return {\n//         radio: data\n//     };\n// };\n\nexport default Index;"]},"metadata":{},"sourceType":"module"}